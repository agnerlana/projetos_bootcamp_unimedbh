# -*- coding: utf-8 -*-
"""python_para_analise_de_dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z71B8UOWkp7a_2z23JVfwgLNMwljNn6R

### **Projeto - Análise de dados com Python e Pandas**

Este é o primeiro projeto prático do Bootcamp Ciência de Dados DIO - Unimed-BH, seu objetivo é realizar uma análise exploratória de uma base de dados utilizando a biblioteca Pandas. Além dela, também foi utilizada a biblioteca Matplotlib.

A base de dados utilizada foi extraída do repositório da Agência Nacional de Saúde Suplementar (ANS), disponível em:

http://ftp.dadosabertos.ans.gov.br/FTP/PDA/dados_de_beneficiarios_por_operadora/

Esta base contém informações de beneficiários **ATIVOS** das operadoras de planos de saúde, reportadas mensalmente para a ANS.
"""

# Importando as bibliotecas a serem utilizadas
import pandas as pd # Pandas
import matplotlib as plt # Matplotlib

"""#### ----------------

### Importando e preparando o arquivo para análise
"""

# Lendo o banco de dados
df_sib = pd.read_csv("/content/drive/MyDrive/Bootcamp_DIO_Unimed-BH/sib_202208_MG.csv", 
                     dtype= str, encoding='latin-1', error_bad_lines=False, sep=";")

# Dimensões da base de dados (linhas e colunas)
df_sib.shape

# Visualizando as 5 primeiras linhas
df_sib.head()

# Deletando colunas que não serão utilizadas
df_sib = df_sib.drop(columns = ["LG_BENEFICIARIO_ATIVO",
                                "NR_PLANO_PORTABILIDADE",
                                "DT_PRIMEIRA_CONTRATACAO",
                                "DT_REATIVACAO",
                                "DT_ULTIMA_REATIVACAO",
                                "DT_ULTIMA_MUDA_CONTRATUAL",
                                "DT_CANCELAMENTO",
                                "DT_ULTIMO_CANCELAMENTO",
                                "CD_BENE_MOTIV_CANCELAMENTO",
                                "DT_CARGA"])

df_sib.head()

# Tipos dos dados nas colunas (por argumento, todas foram importadas como str)
df_sib.dtypes

# Filtrando registros de interesse (somente beneficiários Unimed-BH)
sib_unimedbh = df_sib.loc[df_sib["CD_OPERADORA"] == "343889"]
sib_unimedbh.head()

# Resetando index e inserindo id_benef
sib_unimedbh = sib_unimedbh.reset_index()
sib_unimedbh = sib_unimedbh.rename(columns = {"index":"id_benef"})
sib_unimedbh["id_benef"] = sib_unimedbh.index + 1
sib_unimedbh["id_benef"] = sib_unimedbh["id_benef"].astype(str)

# Dimensões da base de dados filtrada
sib_unimedbh.shape

# Verificando dados em branco nas colunas
sib_unimedbh.isnull().sum()

# Convertendos datas em str para datetime
sib_unimedbh["DT_INCLUSAO"] = pd.to_datetime(sib_unimedbh["DT_INCLUSAO"], format="%Y-%m")
sib_unimedbh["DT_CONTRATACAO"] = pd.to_datetime(sib_unimedbh["DT_CONTRATACAO"], format="%Y-%m")

# obs.: a variável DT_NASCIMENTO apresenta somente o ano de nascimento, por isso não foi convertida para datetime
# Convertendo o ano_nascimento para numérico e então para inteiro
sib_unimedbh["DT_NASCIMENTO"] = sib_unimedbh["DT_NASCIMENTO"].astype(int)

# Verificando a conversão dos tipos de dados
sib_unimedbh.dtypes

sib_unimedbh.head()

# Substituindo valores - Relação de dependência
sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"] = sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"].replace("1", "Titular")
sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"] = sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"].replace("3", "Cônjuge/Companheiro(a)")
sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"] = sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"].replace("4", "Filho(a)")
sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"] = sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"].replace("6", "Enteado(a)")
sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"] = sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"].replace("8", "Pai/Mãe")
sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"] = sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"].replace("10", "Agregado/Outros")

"""#### ----------------

### Análise exploratória
"""

# Beneficiários ativos - competência 08/2022
n_beneficiarios = sib_unimedbh["id_benef"].value_counts().sum()
print(f"A Unimed-BH reportou à ANS um total de{n_beneficiarios: ,} beneficiários ativos na competência 08/2022")

# Beneficiários por sexo
sexo_benef = sib_unimedbh["TP_SEXO"].value_counts()
sexo_benef.plot.pie(autopct="%.1f%%", shadow=True, startangle=90)

# Beneficiários por relação de dependência
dependencia_benef = sib_unimedbh["ID_BENE_TIPO_DEPENDENTE"].value_counts()
print(dependencia_benef)
dependencia_benef.plot.bar() #(autopct="%.1f%%", shadow=True, startangle=90)

# Beneficiários por município (recortando a base e selecionando os 10 primeiros)
benef_municipio = sib_unimedbh["CD_MUNICIPIO"].value_counts().to_frame()
benef_municipio = benef_municipio.rename(columns = {"CD_MUNICIPIO":"qtd_benef"})
benef_municipio = benef_municipio.nlargest(10, "qtd_benef")

# Acrescentando coluna e atribuíndo nomes aos códigos dos municípios
benef_municipio = benef_municipio.reset_index()
benef_municipio = benef_municipio.rename(columns = {"index":"nome_municipio"})

benef_municipio["nome_municipio"] = benef_municipio["nome_municipio"].replace("310620", "Belo Horizonte")
benef_municipio["nome_municipio"] = benef_municipio["nome_municipio"].replace("311860", "Contagem")
benef_municipio["nome_municipio"] = benef_municipio["nome_municipio"].replace("310670", "Betim")
benef_municipio["nome_municipio"] = benef_municipio["nome_municipio"].replace("315460", "Ribeirão das Neves")
benef_municipio["nome_municipio"] = benef_municipio["nome_municipio"].replace("314480", "Nova Lima")
benef_municipio["nome_municipio"] = benef_municipio["nome_municipio"].replace("315780", "Santa Luzia")
benef_municipio["nome_municipio"] = benef_municipio["nome_municipio"].replace("312980", "Ibirité")
benef_municipio["nome_municipio"] = benef_municipio["nome_municipio"].replace("315670", "Sabará")
benef_municipio["nome_municipio"] = benef_municipio["nome_municipio"].replace("317120", "Vespasiano")
benef_municipio["nome_municipio"] = benef_municipio["nome_municipio"].replace("314930", "Pedro Leopoldo")

benef_municipio

benef_sorted_asce = benef_municipio.sort_values("qtd_benef", ascending=True)
benef_sorted_asce.plot.barh(x="nome_municipio")

"""# ----------------------------------------

"""